#include <SDL2/SDL.h>
#include <math.h>
#include <stdio.h>

#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600
#define WORLD_WIDTH 2000
#define WORLD_HEIGHT 2000
#define PLAYER_SPEED 5.0f
#define PLAYER_ROTATION_SPEED 5.0f
#define BULLET_SPEED 10.0f
#define MAX_BULLETS 100

typedef struct {
    float x, y;    // Position in world coordinates
    float angle;   // Facing angle in degrees
} Player;

typedef struct {
    float x, y;    // Position in world coordinates
    float dx, dy;  // Velocity components
    int active;
} Bullet;

typedef struct {
    float x, y;    // Top-left corner of the viewport in world coordinates
} Camera;

int main(int argc, char* argv[]) {
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        fprintf(stderr, "SDL_Init Error: %s\n", SDL_GetError());
        return 1;
    }

    SDL_Window* window = SDL_CreateWindow("Safari Game Remake", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        fprintf(stderr, "SDL_CreateWindow Error: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (!renderer) {
        fprintf(stderr, "SDL_CreateRenderer Error: %s\n", SDL_GetError());
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }

    // Initialize game objects
    Player player = {WORLD_WIDTH / 2.0f, WORLD_HEIGHT / 2.0f, 0.0f};
    Bullet bullets[MAX_BULLETS] = {0};
    int bulletCount = 0;
    Camera camera = {0, 0};
    int running = 1;
    SDL_Event event;
    int spacePressed = 0; // Track space key state for single-shot firing

    while (running) {
        // Handle events
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                running = 0;
            }
        }

        // Handle input
        const Uint8* keys = SDL_GetKeyboardState(NULL);
        if (keys[SDL_SCANCODE_LEFT]) {
            player.angle -= PLAYER_ROTATION_SPEED;
        }
        if (keys[SDL_SCANCODE_RIGHT]) {
            player.angle += PLAYER_ROTATION_SPEED;
        }

        // Normalize movement for diagonal directions
        float moveX = 0, moveY = 0;
        if (keys[SDL_SCANCODE_UP]) {
            moveX += cos(player.angle * M_PI / 180.0f);
            moveY += sin(player.angle * M_PI / 180.0f);
        }
        if (keys[SDL_SCANCODE_DOWN]) {
            moveX -= cos(player.angle * M_PI / 180.0f);
            moveY -= sin(player.angle * M_PI / 180.0f);
        }
        float magnitude = sqrt(moveX * moveX + moveY * moveY);
        if (magnitude > 0) {
            moveX = (moveX / magnitude) * PLAYER_SPEED;
            moveY = (moveY / magnitude) * PLAYER_SPEED;
        }
        player.x += moveX;
        player.y += moveY;

        // Shooting: Fire only on initial press
        if (keys[SDL_SCANCODE_SPACE] && !spacePressed && bulletCount < MAX_BULLETS) {
            bullets[bulletCount].x = player.x;
            bullets[bulletCount].y = player.y;
            bullets[bulletCount].dx = BULLET_SPEED * cos(player.angle * M_PI / 180.0f);
            bullets[bulletCount].dy = BULLET_SPEED * sin(player.angle * M_PI / 180.0f);
            bullets[bulletCount].active = 1;
            bulletCount++;
            spacePressed = 1;
        } else if (!keys[SDL_SCANCODE_SPACE]) {
            spacePressed = 0;
        }

        // Keep player within world bounds
        if (player.x < 0) player.x = 0;
        if (player.x > WORLD_WIDTH) player.x = WORLD_WIDTH;
        if (player.y < 0) player.y = 0;
        if (player.y > WORLD_HEIGHT) player.y = WORLD_HEIGHT;

        // Update camera to follow player
        camera.x = player.x - WINDOW_WIDTH / 2.0f;
        camera.y = player.y - WINDOW_HEIGHT / 2.0f;
        if (camera.x < 0) camera.x = 0;
        if (camera.x > WORLD_WIDTH - WINDOW_WIDTH) camera.x = WORLD_WIDTH - WINDOW_WIDTH;
        if (camera.y < 0) camera.y = 0;
        if (camera.y > WORLD_HEIGHT - WINDOW_HEIGHT) camera.y = WORLD_HEIGHT - WINDOW_HEIGHT;

        // Update bullets
        for (int i = 0; i < bulletCount; i++) {
            if (bullets[i].active) {
                bullets[i].x += bullets[i].dx;
                bullets[i].y += bullets[i].dy;
                if (bullets[i].x < 0 || bullets[i].x > WORLD_WIDTH || bullets[i].y < 0 || bullets[i].y > WORLD_HEIGHT) {
                    bullets[i].active = 0;
                }
            }
        }

        // Render
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Draw world background (gray rectangle)
        SDL_Rect worldRect = {(int)-camera.x, (int)-camera.y, WORLD_WIDTH, WORLD_HEIGHT};
        SDL_SetRenderDrawColor(renderer, 50, 50, 50, 255);
        SDL_RenderFillRect(renderer, &worldRect);

        // Draw player relative to camera
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_Point playerPoints[4] = {
            {(int)(player.x - camera.x + 20 * cos(player.angle * M_PI / 180.0f)), (int)(player.y - camera.y + 20 * sin(player.angle * M_PI / 180.0f))},
            {(int)(player.x - camera.x + 10 * cos((player.angle + 135) * M_PI / 180.0f)), (int)(player.y - camera.y + 10 * sin((player.angle + 135) * M_PI / 180.0f))},
            {(int)(player.x - camera.x + 10 * cos((player.angle - 135) * M_PI / 180.0f)), (int)(player.y - camera.y + 10 * sin((player.angle - 135) * M_PI / 180.0f))},
            {(int)(player.x - camera.x + 20 * cos(player.angle * M_PI / 180.0f)), (int)(player.y - camera.y + 20 * sin(player.angle * M_PI / 180.0f))}
        };
        SDL_RenderDrawLines(renderer, playerPoints, 4);

        // Draw bullets relative to camera
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        for (int i = 0; i < bulletCount; i++) {
            if (bullets[i].active) {
                SDL_Rect bulletRect = {(int)(bullets[i].x - camera.x), (int)(bullets[i].y - camera.y), 5, 5};
                SDL_RenderFillRect(renderer, &bulletRect);
            }
        }

        SDL_RenderPresent(renderer);
        SDL_Delay(16); // Cap at ~60 FPS
    }

    // Cleanup
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}
